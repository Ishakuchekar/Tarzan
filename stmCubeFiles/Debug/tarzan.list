
tarzan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002368  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002428  08002428  00003428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002458  08002458  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002458  08002458  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002458  08002458  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002458  08002458  00003458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800245c  0800245c  0000345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002460  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800246c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800246c  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071e8  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001469  00000000  00000000  0000b21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b8  00000000  00000000  0000cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f701  00000000  00000000  0000d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dfd  00000000  00000000  0001cce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060a7c  00000000  00000000  00026ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00087562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  000875a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00089480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002410 	.word	0x08002410

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002410 	.word	0x08002410

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb30 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f902 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9d6 	bl	80005dc <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f94a 	bl	80004c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//PB0 TIM3 TIM6
 8000234:	4b7b      	ldr	r3, [pc, #492]	@ (8000424 <main+0x204>)
 8000236:	2108      	movs	r1, #8
 8000238:	0018      	movs	r0, r3
 800023a:	f001 fadb 	bl	80017f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//PA7 TIM3 CH2
 800023e:	4b79      	ldr	r3, [pc, #484]	@ (8000424 <main+0x204>)
 8000240:	2104      	movs	r1, #4
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fad6 	bl	80017f4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	// Set the rotation direction backward
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000248:	4b77      	ldr	r3, [pc, #476]	@ (8000428 <main+0x208>)
 800024a:	2200      	movs	r2, #0
 800024c:	2110      	movs	r1, #16
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fdc6 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000254:	4b74      	ldr	r3, [pc, #464]	@ (8000428 <main+0x208>)
 8000256:	2201      	movs	r2, #1
 8000258:	2120      	movs	r1, #32
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fdc0 	bl	8000de0 <HAL_GPIO_WritePin>
	    // Set the speed slow
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 1000);
 8000260:	4b70      	ldr	r3, [pc, #448]	@ (8000424 <main+0x204>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	22fa      	movs	r2, #250	@ 0xfa
 8000266:	0092      	lsls	r2, r2, #2
 8000268:	63da      	str	r2, [r3, #60]	@ 0x3c
	    HAL_Delay(2000);
 800026a:	23fa      	movs	r3, #250	@ 0xfa
 800026c:	00db      	lsls	r3, r3, #3
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fb6e 	bl	8000950 <HAL_Delay>
	    // Set the speed medium
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 1500);
 8000274:	4b6b      	ldr	r3, [pc, #428]	@ (8000424 <main+0x204>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a6c      	ldr	r2, [pc, #432]	@ (800042c <main+0x20c>)
 800027a:	63da      	str	r2, [r3, #60]	@ 0x3c
	    HAL_Delay(2000);
 800027c:	23fa      	movs	r3, #250	@ 0xfa
 800027e:	00db      	lsls	r3, r3, #3
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fb65 	bl	8000950 <HAL_Delay>
	    // Set the speed high
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 2000);
 8000286:	4b67      	ldr	r3, [pc, #412]	@ (8000424 <main+0x204>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	22fa      	movs	r2, #250	@ 0xfa
 800028c:	00d2      	lsls	r2, r2, #3
 800028e:	63da      	str	r2, [r3, #60]	@ 0x3c
	    HAL_Delay(2000);
 8000290:	23fa      	movs	r3, #250	@ 0xfa
 8000292:	00db      	lsls	r3, r3, #3
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fb5b 	bl	8000950 <HAL_Delay>
	    // Stop the motor
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800029a:	4b63      	ldr	r3, [pc, #396]	@ (8000428 <main+0x208>)
 800029c:	2200      	movs	r2, #0
 800029e:	2110      	movs	r1, #16
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fd9d 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80002a6:	4b60      	ldr	r3, [pc, #384]	@ (8000428 <main+0x208>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	2120      	movs	r1, #32
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fd97 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_Delay(2000);
 80002b2:	23fa      	movs	r3, #250	@ 0xfa
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fb4a 	bl	8000950 <HAL_Delay>
	    // Set the rotation direction forward
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80002bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000428 <main+0x208>)
 80002be:	2201      	movs	r2, #1
 80002c0:	2110      	movs	r1, #16
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 fd8c 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80002c8:	4b57      	ldr	r3, [pc, #348]	@ (8000428 <main+0x208>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	2120      	movs	r1, #32
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fd86 	bl	8000de0 <HAL_GPIO_WritePin>
	    // Set the speed slow
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 1000);
 80002d4:	4b53      	ldr	r3, [pc, #332]	@ (8000424 <main+0x204>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	22fa      	movs	r2, #250	@ 0xfa
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	63da      	str	r2, [r3, #60]	@ 0x3c
	    HAL_Delay(2000);
 80002de:	23fa      	movs	r3, #250	@ 0xfa
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fb34 	bl	8000950 <HAL_Delay>
	    // Set the speed medium
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 1500);
 80002e8:	4b4e      	ldr	r3, [pc, #312]	@ (8000424 <main+0x204>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a4f      	ldr	r2, [pc, #316]	@ (800042c <main+0x20c>)
 80002ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	    HAL_Delay(2000);
 80002f0:	23fa      	movs	r3, #250	@ 0xfa
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fb2b 	bl	8000950 <HAL_Delay>
	    // Set the speed high
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 2000);
 80002fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000424 <main+0x204>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	22fa      	movs	r2, #250	@ 0xfa
 8000300:	00d2      	lsls	r2, r2, #3
 8000302:	63da      	str	r2, [r3, #60]	@ 0x3c
	    HAL_Delay(2000);
 8000304:	23fa      	movs	r3, #250	@ 0xfa
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	0018      	movs	r0, r3
 800030a:	f000 fb21 	bl	8000950 <HAL_Delay>
	    // Stop the motor
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800030e:	4b46      	ldr	r3, [pc, #280]	@ (8000428 <main+0x208>)
 8000310:	2200      	movs	r2, #0
 8000312:	2110      	movs	r1, #16
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fd63 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800031a:	4b43      	ldr	r3, [pc, #268]	@ (8000428 <main+0x208>)
 800031c:	2200      	movs	r2, #0
 800031e:	2120      	movs	r1, #32
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fd5d 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_Delay(2000);
 8000326:	23fa      	movs	r3, #250	@ 0xfa
 8000328:	00db      	lsls	r3, r3, #3
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fb10 	bl	8000950 <HAL_Delay>

	    //FOR ANOTHER MOTOR, code starts from here:
	    // Set the rotation direction backward
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000330:	2390      	movs	r3, #144	@ 0x90
 8000332:	05db      	lsls	r3, r3, #23
 8000334:	2200      	movs	r2, #0
 8000336:	2110      	movs	r1, #16
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fd51 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800033e:	4b3a      	ldr	r3, [pc, #232]	@ (8000428 <main+0x208>)
 8000340:	2201      	movs	r2, #1
 8000342:	2101      	movs	r1, #1
 8000344:	0018      	movs	r0, r3
 8000346:	f000 fd4b 	bl	8000de0 <HAL_GPIO_WritePin>
	    // Set the speed slow
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000);
 800034a:	4b36      	ldr	r3, [pc, #216]	@ (8000424 <main+0x204>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	22fa      	movs	r2, #250	@ 0xfa
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_Delay(2000);
 8000354:	23fa      	movs	r3, #250	@ 0xfa
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	0018      	movs	r0, r3
 800035a:	f000 faf9 	bl	8000950 <HAL_Delay>
	    // Set the speed medium
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1500);
 800035e:	4b31      	ldr	r3, [pc, #196]	@ (8000424 <main+0x204>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a32      	ldr	r2, [pc, #200]	@ (800042c <main+0x20c>)
 8000364:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_Delay(2000);
 8000366:	23fa      	movs	r3, #250	@ 0xfa
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	0018      	movs	r0, r3
 800036c:	f000 faf0 	bl	8000950 <HAL_Delay>
	    // Set the speed high
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 2000);
 8000370:	4b2c      	ldr	r3, [pc, #176]	@ (8000424 <main+0x204>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	22fa      	movs	r2, #250	@ 0xfa
 8000376:	00d2      	lsls	r2, r2, #3
 8000378:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_Delay(2000);
 800037a:	23fa      	movs	r3, #250	@ 0xfa
 800037c:	00db      	lsls	r3, r3, #3
 800037e:	0018      	movs	r0, r3
 8000380:	f000 fae6 	bl	8000950 <HAL_Delay>
	    // Stop the motor
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000384:	2390      	movs	r3, #144	@ 0x90
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	2200      	movs	r2, #0
 800038a:	2110      	movs	r1, #16
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fd27 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000392:	4b25      	ldr	r3, [pc, #148]	@ (8000428 <main+0x208>)
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fd21 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_Delay(2000);
 800039e:	23fa      	movs	r3, #250	@ 0xfa
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 fad4 	bl	8000950 <HAL_Delay>
	    // Set the rotation direction forward
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80003a8:	2390      	movs	r3, #144	@ 0x90
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fd15 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80003b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <main+0x208>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	2101      	movs	r1, #1
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 fd0f 	bl	8000de0 <HAL_GPIO_WritePin>
	    // Set the speed slow
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000);
 80003c2:	4b18      	ldr	r3, [pc, #96]	@ (8000424 <main+0x204>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	22fa      	movs	r2, #250	@ 0xfa
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_Delay(2000);
 80003cc:	23fa      	movs	r3, #250	@ 0xfa
 80003ce:	00db      	lsls	r3, r3, #3
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fabd 	bl	8000950 <HAL_Delay>
	    // Set the speed medium
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1500);
 80003d6:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <main+0x204>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a14      	ldr	r2, [pc, #80]	@ (800042c <main+0x20c>)
 80003dc:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_Delay(2000);
 80003de:	23fa      	movs	r3, #250	@ 0xfa
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 fab4 	bl	8000950 <HAL_Delay>
	    // Set the speed high
	    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 2000);
 80003e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <main+0x204>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	22fa      	movs	r2, #250	@ 0xfa
 80003ee:	00d2      	lsls	r2, r2, #3
 80003f0:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_Delay(2000);
 80003f2:	23fa      	movs	r3, #250	@ 0xfa
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 faaa 	bl	8000950 <HAL_Delay>
	    // Stop the motor
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80003fc:	2390      	movs	r3, #144	@ 0x90
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	2200      	movs	r2, #0
 8000402:	2110      	movs	r1, #16
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fceb 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800040a:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <main+0x208>)
 800040c:	2200      	movs	r2, #0
 800040e:	2101      	movs	r1, #1
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fce5 	bl	8000de0 <HAL_GPIO_WritePin>
	    HAL_Delay(2000);
 8000416:	23fa      	movs	r3, #250	@ 0xfa
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fa98 	bl	8000950 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000420:	46c0      	nop			@ (mov r8, r8)
 8000422:	e711      	b.n	8000248 <main+0x28>
 8000424:	20000028 	.word	0x20000028
 8000428:	48000400 	.word	0x48000400
 800042c:	000005dc 	.word	0x000005dc

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b091      	sub	sp, #68	@ 0x44
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	2410      	movs	r4, #16
 8000438:	193b      	adds	r3, r7, r4
 800043a:	0018      	movs	r0, r3
 800043c:	2330      	movs	r3, #48	@ 0x30
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f001 ffb9 	bl	80023b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000446:	003b      	movs	r3, r7
 8000448:	0018      	movs	r0, r3
 800044a:	2310      	movs	r3, #16
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f001 ffb2 	bl	80023b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000454:	0021      	movs	r1, r4
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2202      	movs	r2, #2
 800045a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2201      	movs	r2, #1
 8000460:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2210      	movs	r2, #16
 8000466:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2202      	movs	r2, #2
 800046c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2280      	movs	r2, #128	@ 0x80
 8000472:	0212      	lsls	r2, r2, #8
 8000474:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2280      	movs	r2, #128	@ 0x80
 800047a:	0352      	lsls	r2, r2, #13
 800047c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2200      	movs	r2, #0
 8000482:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000484:	187b      	adds	r3, r7, r1
 8000486:	0018      	movs	r0, r3
 8000488:	f000 fcc8 	bl	8000e1c <HAL_RCC_OscConfig>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000490:	f000 f906 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000494:	003b      	movs	r3, r7
 8000496:	2207      	movs	r2, #7
 8000498:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	003b      	movs	r3, r7
 800049c:	2202      	movs	r2, #2
 800049e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ac:	003b      	movs	r3, r7
 80004ae:	2101      	movs	r1, #1
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 ffd1 	bl	8001458 <HAL_RCC_ClockConfig>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004ba:	f000 f8f1 	bl	80006a0 <Error_Handler>
  }
}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b011      	add	sp, #68	@ 0x44
 80004c4:	bd90      	pop	{r4, r7, pc}
	...

080004c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08e      	sub	sp, #56	@ 0x38
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ce:	2328      	movs	r3, #40	@ 0x28
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	2310      	movs	r3, #16
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f001 ff6d 	bl	80023b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004de:	2320      	movs	r3, #32
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2308      	movs	r3, #8
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f001 ff65 	bl	80023b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	0018      	movs	r0, r3
 80004f2:	231c      	movs	r3, #28
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f001 ff5e 	bl	80023b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004fc:	4b34      	ldr	r3, [pc, #208]	@ (80005d0 <MX_TIM3_Init+0x108>)
 80004fe:	4a35      	ldr	r2, [pc, #212]	@ (80005d4 <MX_TIM3_Init+0x10c>)
 8000500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000502:	4b33      	ldr	r3, [pc, #204]	@ (80005d0 <MX_TIM3_Init+0x108>)
 8000504:	222f      	movs	r2, #47	@ 0x2f
 8000506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000508:	4b31      	ldr	r3, [pc, #196]	@ (80005d0 <MX_TIM3_Init+0x108>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800050e:	4b30      	ldr	r3, [pc, #192]	@ (80005d0 <MX_TIM3_Init+0x108>)
 8000510:	4a31      	ldr	r2, [pc, #196]	@ (80005d8 <MX_TIM3_Init+0x110>)
 8000512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000514:	4b2e      	ldr	r3, [pc, #184]	@ (80005d0 <MX_TIM3_Init+0x108>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051a:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <MX_TIM3_Init+0x108>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000520:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <MX_TIM3_Init+0x108>)
 8000522:	0018      	movs	r0, r3
 8000524:	f001 f8be 	bl	80016a4 <HAL_TIM_Base_Init>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800052c:	f000 f8b8 	bl	80006a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000530:	2128      	movs	r1, #40	@ 0x28
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0152      	lsls	r2, r2, #5
 8000538:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800053a:	187a      	adds	r2, r7, r1
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <MX_TIM3_Init+0x108>)
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f001 facf 	bl	8001ae4 <HAL_TIM_ConfigClockSource>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800054a:	f000 f8a9 	bl	80006a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800054e:	4b20      	ldr	r3, [pc, #128]	@ (80005d0 <MX_TIM3_Init+0x108>)
 8000550:	0018      	movs	r0, r3
 8000552:	f001 f8f7 	bl	8001744 <HAL_TIM_PWM_Init>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800055a:	f000 f8a1 	bl	80006a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055e:	2120      	movs	r1, #32
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800056c:	187a      	adds	r2, r7, r1
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_TIM3_Init+0x108>)
 8000570:	0011      	movs	r1, r2
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fec8 	bl	8002308 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800057c:	f000 f890 	bl	80006a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2260      	movs	r2, #96	@ 0x60
 8000584:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000598:	1d39      	adds	r1, r7, #4
 800059a:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <MX_TIM3_Init+0x108>)
 800059c:	2204      	movs	r2, #4
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 f9da 	bl	8001958 <HAL_TIM_PWM_ConfigChannel>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80005a8:	f000 f87a 	bl	80006a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <MX_TIM3_Init+0x108>)
 80005b0:	2208      	movs	r2, #8
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 f9d0 	bl	8001958 <HAL_TIM_PWM_ConfigChannel>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80005bc:	f000 f870 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005c0:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <MX_TIM3_Init+0x108>)
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f8b4 	bl	8000730 <HAL_TIM_MspPostInit>

}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b00e      	add	sp, #56	@ 0x38
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000028 	.word	0x20000028
 80005d4:	40000400 	.word	0x40000400
 80005d8:	0000ffff 	.word	0x0000ffff

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b089      	sub	sp, #36	@ 0x24
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	240c      	movs	r4, #12
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	0018      	movs	r0, r3
 80005e8:	2314      	movs	r3, #20
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f001 fee3 	bl	80023b8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_GPIO_Init+0xbc>)
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xbc>)
 80005f8:	2180      	movs	r1, #128	@ 0x80
 80005fa:	0289      	lsls	r1, r1, #10
 80005fc:	430a      	orrs	r2, r1
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_GPIO_Init+0xbc>)
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	2380      	movs	r3, #128	@ 0x80
 8000606:	029b      	lsls	r3, r3, #10
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xbc>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xbc>)
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	02c9      	lsls	r1, r1, #11
 8000618:	430a      	orrs	r2, r1
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_GPIO_Init+0xbc>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	@ 0x80
 8000622:	02db      	lsls	r3, r3, #11
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800062a:	2390      	movs	r3, #144	@ 0x90
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2200      	movs	r2, #0
 8000630:	2110      	movs	r1, #16
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fbd4 	bl	8000de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_GPIO_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	2132      	movs	r1, #50	@ 0x32
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fbce 	bl	8000de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2210      	movs	r2, #16
 8000648:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2201      	movs	r2, #1
 800064e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	193a      	adds	r2, r7, r4
 800065e:	2390      	movs	r3, #144	@ 0x90
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fa4b 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800066a:	0021      	movs	r1, r4
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2232      	movs	r2, #50	@ 0x32
 8000670:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2201      	movs	r2, #1
 8000676:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	187b      	adds	r3, r7, r1
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <MX_GPIO_Init+0xc0>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f000 fa38 	bl	8000b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b009      	add	sp, #36	@ 0x24
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	48000400 	.word	0x48000400

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	e7fd      	b.n	80006a8 <Error_Handler+0x8>

080006ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <HAL_MspInit+0x44>)
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <HAL_MspInit+0x44>)
 80006b8:	2101      	movs	r1, #1
 80006ba:	430a      	orrs	r2, r1
 80006bc:	619a      	str	r2, [r3, #24]
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <HAL_MspInit+0x44>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	2201      	movs	r2, #1
 80006c4:	4013      	ands	r3, r2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_MspInit+0x44>)
 80006cc:	69da      	ldr	r2, [r3, #28]
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <HAL_MspInit+0x44>)
 80006d0:	2180      	movs	r1, #128	@ 0x80
 80006d2:	0549      	lsls	r1, r1, #21
 80006d4:	430a      	orrs	r2, r1
 80006d6:	61da      	str	r2, [r3, #28]
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <HAL_MspInit+0x44>)
 80006da:	69da      	ldr	r2, [r3, #28]
 80006dc:	2380      	movs	r3, #128	@ 0x80
 80006de:	055b      	lsls	r3, r3, #21
 80006e0:	4013      	ands	r3, r2
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a09      	ldr	r2, [pc, #36]	@ (8000728 <HAL_TIM_Base_MspInit+0x34>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d10b      	bne.n	800071e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <HAL_TIM_Base_MspInit+0x38>)
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <HAL_TIM_Base_MspInit+0x38>)
 800070c:	2102      	movs	r1, #2
 800070e:	430a      	orrs	r2, r1
 8000710:	61da      	str	r2, [r3, #28]
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_TIM_Base_MspInit+0x38>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	2202      	movs	r2, #2
 8000718:	4013      	ands	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b004      	add	sp, #16
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	40000400 	.word	0x40000400
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08b      	sub	sp, #44	@ 0x2c
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	2414      	movs	r4, #20
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	2314      	movs	r3, #20
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f001 fe38 	bl	80023b8 <memset>
  if(htim->Instance==TIM3)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a27      	ldr	r2, [pc, #156]	@ (80007ec <HAL_TIM_MspPostInit+0xbc>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d147      	bne.n	80007e2 <HAL_TIM_MspPostInit+0xb2>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <HAL_TIM_MspPostInit+0xc0>)
 8000754:	695a      	ldr	r2, [r3, #20]
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <HAL_TIM_MspPostInit+0xc0>)
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	0289      	lsls	r1, r1, #10
 800075c:	430a      	orrs	r2, r1
 800075e:	615a      	str	r2, [r3, #20]
 8000760:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <HAL_TIM_MspPostInit+0xc0>)
 8000762:	695a      	ldr	r2, [r3, #20]
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	029b      	lsls	r3, r3, #10
 8000768:	4013      	ands	r3, r2
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <HAL_TIM_MspPostInit+0xc0>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <HAL_TIM_MspPostInit+0xc0>)
 8000774:	2180      	movs	r1, #128	@ 0x80
 8000776:	02c9      	lsls	r1, r1, #11
 8000778:	430a      	orrs	r2, r1
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <HAL_TIM_MspPostInit+0xc0>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	2380      	movs	r3, #128	@ 0x80
 8000782:	02db      	lsls	r3, r3, #11
 8000784:	4013      	ands	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2202      	movs	r2, #2
 8000794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	193a      	adds	r2, r7, r4
 80007aa:	2390      	movs	r3, #144	@ 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 f9a5 	bl	8000b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	0021      	movs	r1, r4
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2201      	movs	r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2202      	movs	r2, #2
 80007c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2201      	movs	r2, #1
 80007d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	4a06      	ldr	r2, [pc, #24]	@ (80007f4 <HAL_TIM_MspPostInit+0xc4>)
 80007da:	0019      	movs	r1, r3
 80007dc:	0010      	movs	r0, r2
 80007de:	f000 f98f 	bl	8000b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b00b      	add	sp, #44	@ 0x2c
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	40000400 	.word	0x40000400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000400 	.word	0x48000400

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f87a 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000834:	480d      	ldr	r0, [pc, #52]	@ (800086c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000836:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000838:	f7ff fff7 	bl	800082a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	@ (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	@ (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000862:	f001 fdb1 	bl	80023c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff fcdb 	bl	8000220 <main>

0800086a <LoopForever>:

LoopForever:
    b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   r0, =_estack
 800086c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	08002460 	.word	0x08002460
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	20000074 	.word	0x20000074

08000884 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_IRQHandler>
	...

08000888 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <HAL_Init+0x24>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_Init+0x24>)
 8000892:	2110      	movs	r1, #16
 8000894:	430a      	orrs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f809 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089e:	f7ff ff05 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <HAL_InitTick+0x5c>)
 80008ba:	681c      	ldr	r4, [r3, #0]
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <HAL_InitTick+0x60>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	0019      	movs	r1, r3
 80008c2:	23fa      	movs	r3, #250	@ 0xfa
 80008c4:	0098      	lsls	r0, r3, #2
 80008c6:	f7ff fc1f 	bl	8000108 <__udivsi3>
 80008ca:	0003      	movs	r3, r0
 80008cc:	0019      	movs	r1, r3
 80008ce:	0020      	movs	r0, r4
 80008d0:	f7ff fc1a 	bl	8000108 <__udivsi3>
 80008d4:	0003      	movs	r3, r0
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 f905 	bl	8000ae6 <HAL_SYSTICK_Config>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e00f      	b.n	8000904 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d80b      	bhi.n	8000902 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	2301      	movs	r3, #1
 80008ee:	425b      	negs	r3, r3
 80008f0:	2200      	movs	r2, #0
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 f8e2 	bl	8000abc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_InitTick+0x64>)
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b003      	add	sp, #12
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	001a      	movs	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	18d2      	adds	r2, r2, r3
 8000928:	4b03      	ldr	r3, [pc, #12]	@ (8000938 <HAL_IncTick+0x20>)
 800092a:	601a      	str	r2, [r3, #0]
}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	20000008 	.word	0x20000008
 8000938:	20000070 	.word	0x20000070

0800093c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	@ (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	0018      	movs	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	20000070 	.word	0x20000070

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff fff0 	bl	800093c <HAL_GetTick>
 800095c:	0003      	movs	r3, r0
 800095e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3301      	adds	r3, #1
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	001a      	movs	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	189b      	adds	r3, r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	f7ff ffe0 	bl	800093c <HAL_GetTick>
 800097c:	0002      	movs	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b004      	add	sp, #16
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	20000008 	.word	0x20000008

08000998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	0002      	movs	r2, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ac:	d828      	bhi.n	8000a00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ae:	4a2f      	ldr	r2, [pc, #188]	@ (8000a6c <__NVIC_SetPriority+0xd4>)
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	33c0      	adds	r3, #192	@ 0xc0
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	589b      	ldr	r3, [r3, r2]
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	0011      	movs	r1, r2
 80009c4:	2203      	movs	r2, #3
 80009c6:	400a      	ands	r2, r1
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	21ff      	movs	r1, #255	@ 0xff
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	22ff      	movs	r2, #255	@ 0xff
 80009dc:	401a      	ands	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	2303      	movs	r3, #3
 80009e6:	4003      	ands	r3, r0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	481f      	ldr	r0, [pc, #124]	@ (8000a6c <__NVIC_SetPriority+0xd4>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	430a      	orrs	r2, r1
 80009f8:	33c0      	adds	r3, #192	@ 0xc0
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009fe:	e031      	b.n	8000a64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a00:	4a1b      	ldr	r2, [pc, #108]	@ (8000a70 <__NVIC_SetPriority+0xd8>)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	0019      	movs	r1, r3
 8000a08:	230f      	movs	r3, #15
 8000a0a:	400b      	ands	r3, r1
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	3306      	adds	r3, #6
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	18d3      	adds	r3, r2, r3
 8000a16:	3304      	adds	r3, #4
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1dfa      	adds	r2, r7, #7
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	0011      	movs	r1, r2
 8000a20:	2203      	movs	r2, #3
 8000a22:	400a      	ands	r2, r1
 8000a24:	00d2      	lsls	r2, r2, #3
 8000a26:	21ff      	movs	r1, #255	@ 0xff
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	43d2      	mvns	r2, r2
 8000a2e:	401a      	ands	r2, r3
 8000a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	22ff      	movs	r2, #255	@ 0xff
 8000a38:	401a      	ands	r2, r3
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2303      	movs	r3, #3
 8000a42:	4003      	ands	r3, r0
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <__NVIC_SetPriority+0xd8>)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	001c      	movs	r4, r3
 8000a50:	230f      	movs	r3, #15
 8000a52:	4023      	ands	r3, r4
 8000a54:	3b08      	subs	r3, #8
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	3306      	adds	r3, #6
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	18c3      	adds	r3, r0, r3
 8000a60:	3304      	adds	r3, #4
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b003      	add	sp, #12
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	2380      	movs	r3, #128	@ 0x80
 8000a82:	045b      	lsls	r3, r3, #17
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d301      	bcc.n	8000a8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e010      	b.n	8000aae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <SysTick_Config+0x44>)
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	3a01      	subs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a94:	2301      	movs	r3, #1
 8000a96:	425b      	negs	r3, r3
 8000a98:	2103      	movs	r1, #3
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff ff7c 	bl	8000998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <SysTick_Config+0x44>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa6:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <SysTick_Config+0x44>)
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	e000e010 	.word	0xe000e010

08000abc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	1c02      	adds	r2, r0, #0
 8000acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff5d 	bl	8000998 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b004      	add	sp, #16
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ffbf 	bl	8000a74 <SysTick_Config>
 8000af6:	0003      	movs	r3, r0
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	e14f      	b.n	8000db0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d100      	bne.n	8000b28 <HAL_GPIO_Init+0x28>
 8000b26:	e140      	b.n	8000daa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d005      	beq.n	8000b40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d130      	bne.n	8000ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	0013      	movs	r3, r2
 8000b50:	43da      	mvns	r2, r3
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	409a      	lsls	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b76:	2201      	movs	r2, #1
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d017      	beq.n	8000bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2203      	movs	r2, #3
 8000be4:	4013      	ands	r3, r2
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d123      	bne.n	8000c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	58d3      	ldr	r3, [r2, r3]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	43da      	mvns	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2107      	movs	r1, #7
 8000c16:	400b      	ands	r3, r1
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	6939      	ldr	r1, [r7, #16]
 8000c30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	43da      	mvns	r2, r3
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	401a      	ands	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	23c0      	movs	r3, #192	@ 0xc0
 8000c6c:	029b      	lsls	r3, r3, #10
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d100      	bne.n	8000c74 <HAL_GPIO_Init+0x174>
 8000c72:	e09a      	b.n	8000daa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b54      	ldr	r3, [pc, #336]	@ (8000dc8 <HAL_GPIO_Init+0x2c8>)
 8000c76:	699a      	ldr	r2, [r3, #24]
 8000c78:	4b53      	ldr	r3, [pc, #332]	@ (8000dc8 <HAL_GPIO_Init+0x2c8>)
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	619a      	str	r2, [r3, #24]
 8000c80:	4b51      	ldr	r3, [pc, #324]	@ (8000dc8 <HAL_GPIO_Init+0x2c8>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	2201      	movs	r2, #1
 8000c86:	4013      	ands	r3, r2
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	589b      	ldr	r3, [r3, r2]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	2390      	movs	r3, #144	@ 0x90
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d013      	beq.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a44      	ldr	r2, [pc, #272]	@ (8000dd0 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00d      	beq.n	8000cde <HAL_GPIO_Init+0x1de>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a43      	ldr	r2, [pc, #268]	@ (8000dd4 <HAL_GPIO_Init+0x2d4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0x1da>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a42      	ldr	r2, [pc, #264]	@ (8000dd8 <HAL_GPIO_Init+0x2d8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_GPIO_Init+0x1d6>
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	e004      	b.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e002      	b.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	400a      	ands	r2, r1
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	4093      	lsls	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf4:	4935      	ldr	r1, [pc, #212]	@ (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	035b      	lsls	r3, r3, #13
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	039b      	lsls	r3, r3, #14
 8000d44:	4013      	ands	r3, r2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	029b      	lsls	r3, r3, #10
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	40da      	lsrs	r2, r3
 8000db8:	1e13      	subs	r3, r2, #0
 8000dba:	d000      	beq.n	8000dbe <HAL_GPIO_Init+0x2be>
 8000dbc:	e6a8      	b.n	8000b10 <HAL_GPIO_Init+0x10>
  } 
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b006      	add	sp, #24
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	48000c00 	.word	0x48000c00
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	0008      	movs	r0, r1
 8000dea:	0011      	movs	r1, r2
 8000dec:	1cbb      	adds	r3, r7, #2
 8000dee:	1c02      	adds	r2, r0, #0
 8000df0:	801a      	strh	r2, [r3, #0]
 8000df2:	1c7b      	adds	r3, r7, #1
 8000df4:	1c0a      	adds	r2, r1, #0
 8000df6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df8:	1c7b      	adds	r3, r7, #1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d004      	beq.n	8000e0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e00:	1cbb      	adds	r3, r7, #2
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e08:	e003      	b.n	8000e12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e0a:	1cbb      	adds	r3, r7, #2
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e305      	b.n	800143a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4013      	ands	r3, r2
 8000e36:	d100      	bne.n	8000e3a <HAL_RCC_OscConfig+0x1e>
 8000e38:	e08d      	b.n	8000f56 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e3a:	4bc5      	ldr	r3, [pc, #788]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	220c      	movs	r2, #12
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d00e      	beq.n	8000e64 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e46:	4bc2      	ldr	r3, [pc, #776]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d116      	bne.n	8000e80 <HAL_RCC_OscConfig+0x64>
 8000e52:	4bbf      	ldr	r3, [pc, #764]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	23c0      	movs	r3, #192	@ 0xc0
 8000e58:	025b      	lsls	r3, r3, #9
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d10d      	bne.n	8000e80 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e64:	4bba      	ldr	r3, [pc, #744]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0x56>
 8000e70:	e070      	b.n	8000f54 <HAL_RCC_OscConfig+0x138>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d000      	beq.n	8000e7c <HAL_RCC_OscConfig+0x60>
 8000e7a:	e06b      	b.n	8000f54 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e2dc      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d107      	bne.n	8000e98 <HAL_RCC_OscConfig+0x7c>
 8000e88:	4bb1      	ldr	r3, [pc, #708]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4bb0      	ldr	r3, [pc, #704]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e8e:	2180      	movs	r1, #128	@ 0x80
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e02f      	b.n	8000ef8 <HAL_RCC_OscConfig+0xdc>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10c      	bne.n	8000eba <HAL_RCC_OscConfig+0x9e>
 8000ea0:	4bab      	ldr	r3, [pc, #684]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4baa      	ldr	r3, [pc, #680]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ea6:	49ab      	ldr	r1, [pc, #684]	@ (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	4ba8      	ldr	r3, [pc, #672]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4ba7      	ldr	r3, [pc, #668]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000eb2:	49a9      	ldr	r1, [pc, #676]	@ (8001158 <HAL_RCC_OscConfig+0x33c>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e01e      	b.n	8000ef8 <HAL_RCC_OscConfig+0xdc>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	d10e      	bne.n	8000ee0 <HAL_RCC_OscConfig+0xc4>
 8000ec2:	4ba3      	ldr	r3, [pc, #652]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4ba2      	ldr	r3, [pc, #648]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ec8:	2180      	movs	r1, #128	@ 0x80
 8000eca:	02c9      	lsls	r1, r1, #11
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	4b9f      	ldr	r3, [pc, #636]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b9e      	ldr	r3, [pc, #632]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ed6:	2180      	movs	r1, #128	@ 0x80
 8000ed8:	0249      	lsls	r1, r1, #9
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0xdc>
 8000ee0:	4b9b      	ldr	r3, [pc, #620]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b9a      	ldr	r3, [pc, #616]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ee6:	499b      	ldr	r1, [pc, #620]	@ (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	400a      	ands	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4b98      	ldr	r3, [pc, #608]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b97      	ldr	r3, [pc, #604]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ef2:	4999      	ldr	r1, [pc, #612]	@ (8001158 <HAL_RCC_OscConfig+0x33c>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d014      	beq.n	8000f2a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fd1c 	bl	800093c <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fd17 	bl	800093c <HAL_GetTick>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b64      	cmp	r3, #100	@ 0x64
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e28e      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	@ 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0xee>
 8000f28:	e015      	b.n	8000f56 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fd07 	bl	800093c <HAL_GetTick>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fd02 	bl	800093c <HAL_GetTick>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	@ 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e279      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	4b82      	ldr	r3, [pc, #520]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x118>
 8000f52:	e000      	b.n	8000f56 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d100      	bne.n	8000f62 <HAL_RCC_OscConfig+0x146>
 8000f60:	e06c      	b.n	800103c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f62:	4b7b      	ldr	r3, [pc, #492]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	220c      	movs	r2, #12
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d00e      	beq.n	8000f8a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f6c:	4b78      	ldr	r3, [pc, #480]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	220c      	movs	r2, #12
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d11f      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x19c>
 8000f78:	4b75      	ldr	r3, [pc, #468]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	23c0      	movs	r3, #192	@ 0xc0
 8000f7e:	025b      	lsls	r3, r3, #9
 8000f80:	401a      	ands	r2, r3
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d116      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8a:	4b71      	ldr	r3, [pc, #452]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	4013      	ands	r3, r2
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x184>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d001      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e24c      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	22f8      	movs	r2, #248	@ 0xf8
 8000fa6:	4393      	bics	r3, r2
 8000fa8:	0019      	movs	r1, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	00da      	lsls	r2, r3, #3
 8000fb0:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb6:	e041      	b.n	800103c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d024      	beq.n	800100a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc0:	4b63      	ldr	r3, [pc, #396]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b62      	ldr	r3, [pc, #392]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fcb6 	bl	800093c <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fcb1 	bl	800093c <HAL_GetTick>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e228      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	4b59      	ldr	r3, [pc, #356]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2202      	movs	r2, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d0f1      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	4b57      	ldr	r3, [pc, #348]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	22f8      	movs	r2, #248	@ 0xf8
 8000ff8:	4393      	bics	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	00da      	lsls	r2, r3, #3
 8001002:	4b53      	ldr	r3, [pc, #332]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e018      	b.n	800103c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100a:	4b51      	ldr	r3, [pc, #324]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b50      	ldr	r3, [pc, #320]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001010:	2101      	movs	r1, #1
 8001012:	438a      	bics	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fc91 	bl	800093c <HAL_GetTick>
 800101a:	0003      	movs	r3, r0
 800101c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fc8c 	bl	800093c <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e203      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	4b47      	ldr	r3, [pc, #284]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2202      	movs	r2, #2
 8001038:	4013      	ands	r3, r2
 800103a:	d1f1      	bne.n	8001020 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2208      	movs	r2, #8
 8001042:	4013      	ands	r3, r2
 8001044:	d036      	beq.n	80010b4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d019      	beq.n	8001082 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104e:	4b40      	ldr	r3, [pc, #256]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001052:	4b3f      	ldr	r3, [pc, #252]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fc6f 	bl	800093c <HAL_GetTick>
 800105e:	0003      	movs	r3, r0
 8001060:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fc6a 	bl	800093c <HAL_GetTick>
 8001068:	0002      	movs	r2, r0
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1e1      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001076:	4b36      	ldr	r3, [pc, #216]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d0f1      	beq.n	8001064 <HAL_RCC_OscConfig+0x248>
 8001080:	e018      	b.n	80010b4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001082:	4b33      	ldr	r3, [pc, #204]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001084:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001086:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001088:	2101      	movs	r1, #1
 800108a:	438a      	bics	r2, r1
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff fc55 	bl	800093c <HAL_GetTick>
 8001092:	0003      	movs	r3, r0
 8001094:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001098:	f7ff fc50 	bl	800093c <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e1c7      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010aa:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 80010ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	d1f1      	bne.n	8001098 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2204      	movs	r2, #4
 80010ba:	4013      	ands	r3, r2
 80010bc:	d100      	bne.n	80010c0 <HAL_RCC_OscConfig+0x2a4>
 80010be:	e0b5      	b.n	800122c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c0:	201f      	movs	r0, #31
 80010c2:	183b      	adds	r3, r7, r0
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c8:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 80010ca:	69da      	ldr	r2, [r3, #28]
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	055b      	lsls	r3, r3, #21
 80010d0:	4013      	ands	r3, r2
 80010d2:	d110      	bne.n	80010f6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 80010d6:	69da      	ldr	r2, [r3, #28]
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	0549      	lsls	r1, r1, #21
 80010de:	430a      	orrs	r2, r1
 80010e0:	61da      	str	r2, [r3, #28]
 80010e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 80010e4:	69da      	ldr	r2, [r3, #28]
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	055b      	lsls	r3, r3, #21
 80010ea:	4013      	ands	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010f0:	183b      	adds	r3, r7, r0
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_RCC_OscConfig+0x340>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2380      	movs	r3, #128	@ 0x80
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4013      	ands	r3, r2
 8001100:	d11a      	bne.n	8001138 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_RCC_OscConfig+0x340>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_RCC_OscConfig+0x340>)
 8001108:	2180      	movs	r1, #128	@ 0x80
 800110a:	0049      	lsls	r1, r1, #1
 800110c:	430a      	orrs	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001110:	f7ff fc14 	bl	800093c <HAL_GetTick>
 8001114:	0003      	movs	r3, r0
 8001116:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111a:	f7ff fc0f 	bl	800093c <HAL_GetTick>
 800111e:	0002      	movs	r2, r0
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b64      	cmp	r3, #100	@ 0x64
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e186      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <HAL_RCC_OscConfig+0x340>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4013      	ands	r3, r2
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d10f      	bne.n	8001160 <HAL_RCC_OscConfig+0x344>
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001142:	6a1a      	ldr	r2, [r3, #32]
 8001144:	4b02      	ldr	r3, [pc, #8]	@ (8001150 <HAL_RCC_OscConfig+0x334>)
 8001146:	2101      	movs	r1, #1
 8001148:	430a      	orrs	r2, r1
 800114a:	621a      	str	r2, [r3, #32]
 800114c:	e036      	b.n	80011bc <HAL_RCC_OscConfig+0x3a0>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	40021000 	.word	0x40021000
 8001154:	fffeffff 	.word	0xfffeffff
 8001158:	fffbffff 	.word	0xfffbffff
 800115c:	40007000 	.word	0x40007000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x366>
 8001168:	4bb6      	ldr	r3, [pc, #728]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	4bb5      	ldr	r3, [pc, #724]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800116e:	2101      	movs	r1, #1
 8001170:	438a      	bics	r2, r1
 8001172:	621a      	str	r2, [r3, #32]
 8001174:	4bb3      	ldr	r3, [pc, #716]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001176:	6a1a      	ldr	r2, [r3, #32]
 8001178:	4bb2      	ldr	r3, [pc, #712]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800117a:	2104      	movs	r1, #4
 800117c:	438a      	bics	r2, r1
 800117e:	621a      	str	r2, [r3, #32]
 8001180:	e01c      	b.n	80011bc <HAL_RCC_OscConfig+0x3a0>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x388>
 800118a:	4bae      	ldr	r3, [pc, #696]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800118c:	6a1a      	ldr	r2, [r3, #32]
 800118e:	4bad      	ldr	r3, [pc, #692]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001190:	2104      	movs	r1, #4
 8001192:	430a      	orrs	r2, r1
 8001194:	621a      	str	r2, [r3, #32]
 8001196:	4bab      	ldr	r3, [pc, #684]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	4baa      	ldr	r3, [pc, #680]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800119c:	2101      	movs	r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	621a      	str	r2, [r3, #32]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0x3a0>
 80011a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	438a      	bics	r2, r1
 80011ae:	621a      	str	r2, [r3, #32]
 80011b0:	4ba4      	ldr	r3, [pc, #656]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80011b2:	6a1a      	ldr	r2, [r3, #32]
 80011b4:	4ba3      	ldr	r3, [pc, #652]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80011b6:	2104      	movs	r1, #4
 80011b8:	438a      	bics	r2, r1
 80011ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d014      	beq.n	80011ee <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c4:	f7ff fbba 	bl	800093c <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	e009      	b.n	80011e2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff fbb5 	bl	800093c <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4a9b      	ldr	r2, [pc, #620]	@ (8001448 <HAL_RCC_OscConfig+0x62c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e12b      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e2:	4b98      	ldr	r3, [pc, #608]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x3b2>
 80011ec:	e013      	b.n	8001216 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fba5 	bl	800093c <HAL_GetTick>
 80011f2:	0003      	movs	r3, r0
 80011f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f6:	e009      	b.n	800120c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f8:	f7ff fba0 	bl	800093c <HAL_GetTick>
 80011fc:	0002      	movs	r2, r0
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	4a91      	ldr	r2, [pc, #580]	@ (8001448 <HAL_RCC_OscConfig+0x62c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e116      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120c:	4b8d      	ldr	r3, [pc, #564]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	2202      	movs	r2, #2
 8001212:	4013      	ands	r3, r2
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001216:	231f      	movs	r3, #31
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d105      	bne.n	800122c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001220:	4b88      	ldr	r3, [pc, #544]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001222:	69da      	ldr	r2, [r3, #28]
 8001224:	4b87      	ldr	r3, [pc, #540]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001226:	4989      	ldr	r1, [pc, #548]	@ (800144c <HAL_RCC_OscConfig+0x630>)
 8001228:	400a      	ands	r2, r1
 800122a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2210      	movs	r2, #16
 8001232:	4013      	ands	r3, r2
 8001234:	d063      	beq.n	80012fe <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d12a      	bne.n	8001294 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800123e:	4b81      	ldr	r3, [pc, #516]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001242:	4b80      	ldr	r3, [pc, #512]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001244:	2104      	movs	r1, #4
 8001246:	430a      	orrs	r2, r1
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800124a:	4b7e      	ldr	r3, [pc, #504]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800124c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800124e:	4b7d      	ldr	r3, [pc, #500]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001250:	2101      	movs	r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fb71 	bl	800093c <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001260:	f7ff fb6c 	bl	800093c <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e0e3      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001272:	4b74      	ldr	r3, [pc, #464]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001276:	2202      	movs	r2, #2
 8001278:	4013      	ands	r3, r2
 800127a:	d0f1      	beq.n	8001260 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800127c:	4b71      	ldr	r3, [pc, #452]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800127e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001280:	22f8      	movs	r2, #248	@ 0xf8
 8001282:	4393      	bics	r3, r2
 8001284:	0019      	movs	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	00da      	lsls	r2, r3, #3
 800128c:	4b6d      	ldr	r3, [pc, #436]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800128e:	430a      	orrs	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	@ 0x34
 8001292:	e034      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	3305      	adds	r3, #5
 800129a:	d111      	bne.n	80012c0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800129c:	4b69      	ldr	r3, [pc, #420]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800129e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012a0:	4b68      	ldr	r3, [pc, #416]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80012a2:	2104      	movs	r1, #4
 80012a4:	438a      	bics	r2, r1
 80012a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012a8:	4b66      	ldr	r3, [pc, #408]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80012aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ac:	22f8      	movs	r2, #248	@ 0xf8
 80012ae:	4393      	bics	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	00da      	lsls	r2, r3, #3
 80012b8:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012be:	e01e      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012c0:	4b60      	ldr	r3, [pc, #384]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80012c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80012c6:	2104      	movs	r1, #4
 80012c8:	430a      	orrs	r2, r1
 80012ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80012ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d0:	4b5c      	ldr	r3, [pc, #368]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	438a      	bics	r2, r1
 80012d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fb30 	bl	800093c <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012e2:	f7ff fb2b 	bl	800093c <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0a2      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012f4:	4b53      	ldr	r3, [pc, #332]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80012f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f8:	2202      	movs	r2, #2
 80012fa:	4013      	ands	r3, r2
 80012fc:	d1f1      	bne.n	80012e2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <HAL_RCC_OscConfig+0x4ec>
 8001306:	e097      	b.n	8001438 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001308:	4b4e      	ldr	r3, [pc, #312]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	220c      	movs	r2, #12
 800130e:	4013      	ands	r3, r2
 8001310:	2b08      	cmp	r3, #8
 8001312:	d100      	bne.n	8001316 <HAL_RCC_OscConfig+0x4fa>
 8001314:	e06b      	b.n	80013ee <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d14c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131e:	4b49      	ldr	r3, [pc, #292]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001324:	494a      	ldr	r1, [pc, #296]	@ (8001450 <HAL_RCC_OscConfig+0x634>)
 8001326:	400a      	ands	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb07 	bl	800093c <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fb02 	bl	800093c <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e079      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001346:	4b3f      	ldr	r3, [pc, #252]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	049b      	lsls	r3, r3, #18
 800134e:	4013      	ands	r3, r2
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001352:	4b3c      	ldr	r3, [pc, #240]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001356:	220f      	movs	r2, #15
 8001358:	4393      	bics	r3, r2
 800135a:	0019      	movs	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001360:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001362:	430a      	orrs	r2, r1
 8001364:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a3a      	ldr	r2, [pc, #232]	@ (8001454 <HAL_RCC_OscConfig+0x638>)
 800136c:	4013      	ands	r3, r2
 800136e:	0019      	movs	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001378:	431a      	orrs	r2, r3
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001380:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001386:	2180      	movs	r1, #128	@ 0x80
 8001388:	0449      	lsls	r1, r1, #17
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff fad5 	bl	800093c <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff fad0 	bl	800093c <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e047      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013aa:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	049b      	lsls	r3, r3, #18
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x57c>
 80013b6:	e03f      	b.n	8001438 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b8:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80013be:	4924      	ldr	r1, [pc, #144]	@ (8001450 <HAL_RCC_OscConfig+0x634>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff faba 	bl	800093c <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff fab5 	bl	800093c <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e02c      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	049b      	lsls	r3, r3, #18
 80013e8:	4013      	ands	r3, r2
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x5b2>
 80013ec:	e024      	b.n	8001438 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e01f      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HAL_RCC_OscConfig+0x628>)
 8001402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001404:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	23c0      	movs	r3, #192	@ 0xc0
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	401a      	ands	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	429a      	cmp	r2, r3
 8001414:	d10e      	bne.n	8001434 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	220f      	movs	r2, #15
 800141a:	401a      	ands	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001420:	429a      	cmp	r2, r3
 8001422:	d107      	bne.n	8001434 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	23f0      	movs	r3, #240	@ 0xf0
 8001428:	039b      	lsls	r3, r3, #14
 800142a:	401a      	ands	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b008      	add	sp, #32
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	40021000 	.word	0x40021000
 8001448:	00001388 	.word	0x00001388
 800144c:	efffffff 	.word	0xefffffff
 8001450:	feffffff 	.word	0xfeffffff
 8001454:	ffc27fff 	.word	0xffc27fff

08001458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b3      	b.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b5b      	ldr	r3, [pc, #364]	@ (80015dc <HAL_RCC_ClockConfig+0x184>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2201      	movs	r2, #1
 8001472:	4013      	ands	r3, r2
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d911      	bls.n	800149e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <HAL_RCC_ClockConfig+0x184>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2201      	movs	r2, #1
 8001480:	4393      	bics	r3, r2
 8001482:	0019      	movs	r1, r3
 8001484:	4b55      	ldr	r3, [pc, #340]	@ (80015dc <HAL_RCC_ClockConfig+0x184>)
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148c:	4b53      	ldr	r3, [pc, #332]	@ (80015dc <HAL_RCC_ClockConfig+0x184>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	4013      	ands	r3, r2
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d001      	beq.n	800149e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e09a      	b.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d015      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2204      	movs	r2, #4
 80014ae:	4013      	ands	r3, r2
 80014b0:	d006      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014b2:	4b4b      	ldr	r3, [pc, #300]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4b4a      	ldr	r3, [pc, #296]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 80014b8:	21e0      	movs	r1, #224	@ 0xe0
 80014ba:	00c9      	lsls	r1, r1, #3
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c0:	4b47      	ldr	r3, [pc, #284]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	22f0      	movs	r2, #240	@ 0xf0
 80014c6:	4393      	bics	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	4b44      	ldr	r3, [pc, #272]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2201      	movs	r2, #1
 80014da:	4013      	ands	r3, r2
 80014dc:	d040      	beq.n	8001560 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	029b      	lsls	r3, r3, #10
 80014ee:	4013      	ands	r3, r2
 80014f0:	d114      	bne.n	800151c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06e      	b.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	049b      	lsls	r3, r3, #18
 8001506:	4013      	ands	r3, r2
 8001508:	d108      	bne.n	800151c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e062      	b.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2202      	movs	r2, #2
 8001514:	4013      	ands	r3, r2
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e05b      	b.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	4393      	bics	r3, r2
 8001524:	0019      	movs	r1, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 800152c:	430a      	orrs	r2, r1
 800152e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001530:	f7ff fa04 	bl	800093c <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001538:	e009      	b.n	800154e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153a:	f7ff f9ff 	bl	800093c <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	4a27      	ldr	r2, [pc, #156]	@ (80015e4 <HAL_RCC_ClockConfig+0x18c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e042      	b.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	220c      	movs	r2, #12
 8001554:	401a      	ands	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d1ec      	bne.n	800153a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001560:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <HAL_RCC_ClockConfig+0x184>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	4013      	ands	r3, r2
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d211      	bcs.n	8001592 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <HAL_RCC_ClockConfig+0x184>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	4393      	bics	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_RCC_ClockConfig+0x184>)
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_RCC_ClockConfig+0x184>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d001      	beq.n	8001592 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e020      	b.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2204      	movs	r2, #4
 8001598:	4013      	ands	r3, r2
 800159a:	d009      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800159c:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <HAL_RCC_ClockConfig+0x190>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015b0:	f000 f820 	bl	80015f4 <HAL_RCC_GetSysClockFreq>
 80015b4:	0001      	movs	r1, r0
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_RCC_ClockConfig+0x188>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	220f      	movs	r2, #15
 80015be:	4013      	ands	r3, r2
 80015c0:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_RCC_ClockConfig+0x194>)
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	000a      	movs	r2, r1
 80015c6:	40da      	lsrs	r2, r3
 80015c8:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_RCC_ClockConfig+0x198>)
 80015ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f7ff f96f 	bl	80008b0 <HAL_InitTick>
  
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b004      	add	sp, #16
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	00001388 	.word	0x00001388
 80015e8:	fffff8ff 	.word	0xfffff8ff
 80015ec:	08002428 	.word	0x08002428
 80015f0:	20000000 	.word	0x20000000

080015f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	220c      	movs	r2, #12
 8001618:	4013      	ands	r3, r2
 800161a:	2b04      	cmp	r3, #4
 800161c:	d002      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x30>
 800161e:	2b08      	cmp	r3, #8
 8001620:	d003      	beq.n	800162a <HAL_RCC_GetSysClockFreq+0x36>
 8001622:	e02e      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001624:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001626:	613b      	str	r3, [r7, #16]
      break;
 8001628:	e02e      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	0c9b      	lsrs	r3, r3, #18
 800162e:	220f      	movs	r2, #15
 8001630:	4013      	ands	r3, r2
 8001632:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_RCC_GetSysClockFreq+0xa0>)
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	220f      	movs	r2, #15
 800163e:	4013      	ands	r3, r2
 8001640:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	23c0      	movs	r3, #192	@ 0xc0
 800164a:	025b      	lsls	r3, r3, #9
 800164c:	401a      	ands	r2, r3
 800164e:	2380      	movs	r3, #128	@ 0x80
 8001650:	025b      	lsls	r3, r3, #9
 8001652:	429a      	cmp	r2, r3
 8001654:	d109      	bne.n	800166a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	480f      	ldr	r0, [pc, #60]	@ (8001698 <HAL_RCC_GetSysClockFreq+0xa4>)
 800165a:	f7fe fd55 	bl	8000108 <__udivsi3>
 800165e:	0003      	movs	r3, r0
 8001660:	001a      	movs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4353      	muls	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e008      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	480a      	ldr	r0, [pc, #40]	@ (8001698 <HAL_RCC_GetSysClockFreq+0xa4>)
 800166e:	f7fe fd4b 	bl	8000108 <__udivsi3>
 8001672:	0003      	movs	r3, r0
 8001674:	001a      	movs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4353      	muls	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
      break;
 8001680:	e002      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001684:	613b      	str	r3, [r7, #16]
      break;
 8001686:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001688:	693b      	ldr	r3, [r7, #16]
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b006      	add	sp, #24
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	40021000 	.word	0x40021000
 8001698:	007a1200 	.word	0x007a1200
 800169c:	08002438 	.word	0x08002438
 80016a0:	08002448 	.word	0x08002448

080016a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e042      	b.n	800173c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	223d      	movs	r2, #61	@ 0x3d
 80016ba:	5c9b      	ldrb	r3, [r3, r2]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d107      	bne.n	80016d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	223c      	movs	r2, #60	@ 0x3c
 80016c6:	2100      	movs	r1, #0
 80016c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff f811 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	223d      	movs	r2, #61	@ 0x3d
 80016d6:	2102      	movs	r1, #2
 80016d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	0019      	movs	r1, r3
 80016e4:	0010      	movs	r0, r2
 80016e6:	f000 fad1 	bl	8001c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2246      	movs	r2, #70	@ 0x46
 80016ee:	2101      	movs	r1, #1
 80016f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	223e      	movs	r2, #62	@ 0x3e
 80016f6:	2101      	movs	r1, #1
 80016f8:	5499      	strb	r1, [r3, r2]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	223f      	movs	r2, #63	@ 0x3f
 80016fe:	2101      	movs	r1, #1
 8001700:	5499      	strb	r1, [r3, r2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2240      	movs	r2, #64	@ 0x40
 8001706:	2101      	movs	r1, #1
 8001708:	5499      	strb	r1, [r3, r2]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2241      	movs	r2, #65	@ 0x41
 800170e:	2101      	movs	r1, #1
 8001710:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2242      	movs	r2, #66	@ 0x42
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2243      	movs	r2, #67	@ 0x43
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2244      	movs	r2, #68	@ 0x44
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2245      	movs	r2, #69	@ 0x45
 800172e:	2101      	movs	r1, #1
 8001730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	223d      	movs	r2, #61	@ 0x3d
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e042      	b.n	80017dc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	223d      	movs	r2, #61	@ 0x3d
 800175a:	5c9b      	ldrb	r3, [r3, r2]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	223c      	movs	r2, #60	@ 0x3c
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 f839 	bl	80017e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	223d      	movs	r2, #61	@ 0x3d
 8001776:	2102      	movs	r1, #2
 8001778:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3304      	adds	r3, #4
 8001782:	0019      	movs	r1, r3
 8001784:	0010      	movs	r0, r2
 8001786:	f000 fa81 	bl	8001c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2246      	movs	r2, #70	@ 0x46
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	223e      	movs	r2, #62	@ 0x3e
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	223f      	movs	r2, #63	@ 0x3f
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2240      	movs	r2, #64	@ 0x40
 80017a6:	2101      	movs	r1, #1
 80017a8:	5499      	strb	r1, [r3, r2]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2241      	movs	r2, #65	@ 0x41
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2242      	movs	r2, #66	@ 0x42
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2243      	movs	r2, #67	@ 0x43
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2244      	movs	r2, #68	@ 0x44
 80017c6:	2101      	movs	r1, #1
 80017c8:	5499      	strb	r1, [r3, r2]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2245      	movs	r2, #69	@ 0x45
 80017ce:	2101      	movs	r1, #1
 80017d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	223d      	movs	r2, #61	@ 0x3d
 80017d6:	2101      	movs	r1, #1
 80017d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d108      	bne.n	8001816 <HAL_TIM_PWM_Start+0x22>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	223e      	movs	r2, #62	@ 0x3e
 8001808:	5c9b      	ldrb	r3, [r3, r2]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	1e5a      	subs	r2, r3, #1
 8001810:	4193      	sbcs	r3, r2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	e01f      	b.n	8001856 <HAL_TIM_PWM_Start+0x62>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d108      	bne.n	800182e <HAL_TIM_PWM_Start+0x3a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	223f      	movs	r2, #63	@ 0x3f
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	3b01      	subs	r3, #1
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	4193      	sbcs	r3, r2
 800182a:	b2db      	uxtb	r3, r3
 800182c:	e013      	b.n	8001856 <HAL_TIM_PWM_Start+0x62>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b08      	cmp	r3, #8
 8001832:	d108      	bne.n	8001846 <HAL_TIM_PWM_Start+0x52>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2240      	movs	r2, #64	@ 0x40
 8001838:	5c9b      	ldrb	r3, [r3, r2]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	1e5a      	subs	r2, r3, #1
 8001840:	4193      	sbcs	r3, r2
 8001842:	b2db      	uxtb	r3, r3
 8001844:	e007      	b.n	8001856 <HAL_TIM_PWM_Start+0x62>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2241      	movs	r2, #65	@ 0x41
 800184a:	5c9b      	ldrb	r3, [r3, r2]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	4193      	sbcs	r3, r2
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06e      	b.n	800193c <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d104      	bne.n	800186e <HAL_TIM_PWM_Start+0x7a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	223e      	movs	r2, #62	@ 0x3e
 8001868:	2102      	movs	r1, #2
 800186a:	5499      	strb	r1, [r3, r2]
 800186c:	e013      	b.n	8001896 <HAL_TIM_PWM_Start+0xa2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b04      	cmp	r3, #4
 8001872:	d104      	bne.n	800187e <HAL_TIM_PWM_Start+0x8a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	223f      	movs	r2, #63	@ 0x3f
 8001878:	2102      	movs	r1, #2
 800187a:	5499      	strb	r1, [r3, r2]
 800187c:	e00b      	b.n	8001896 <HAL_TIM_PWM_Start+0xa2>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b08      	cmp	r3, #8
 8001882:	d104      	bne.n	800188e <HAL_TIM_PWM_Start+0x9a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2240      	movs	r2, #64	@ 0x40
 8001888:	2102      	movs	r1, #2
 800188a:	5499      	strb	r1, [r3, r2]
 800188c:	e003      	b.n	8001896 <HAL_TIM_PWM_Start+0xa2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2241      	movs	r2, #65	@ 0x41
 8001892:	2102      	movs	r1, #2
 8001894:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fd0e 	bl	80022c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a26      	ldr	r2, [pc, #152]	@ (8001944 <HAL_TIM_PWM_Start+0x150>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00e      	beq.n	80018cc <HAL_TIM_PWM_Start+0xd8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a25      	ldr	r2, [pc, #148]	@ (8001948 <HAL_TIM_PWM_Start+0x154>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d009      	beq.n	80018cc <HAL_TIM_PWM_Start+0xd8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a23      	ldr	r2, [pc, #140]	@ (800194c <HAL_TIM_PWM_Start+0x158>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d004      	beq.n	80018cc <HAL_TIM_PWM_Start+0xd8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a22      	ldr	r2, [pc, #136]	@ (8001950 <HAL_TIM_PWM_Start+0x15c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_TIM_PWM_Start+0xdc>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_TIM_PWM_Start+0xde>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2180      	movs	r1, #128	@ 0x80
 80018e2:	0209      	lsls	r1, r1, #8
 80018e4:	430a      	orrs	r2, r1
 80018e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <HAL_TIM_PWM_Start+0x150>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d009      	beq.n	8001906 <HAL_TIM_PWM_Start+0x112>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a17      	ldr	r2, [pc, #92]	@ (8001954 <HAL_TIM_PWM_Start+0x160>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d004      	beq.n	8001906 <HAL_TIM_PWM_Start+0x112>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a11      	ldr	r2, [pc, #68]	@ (8001948 <HAL_TIM_PWM_Start+0x154>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d111      	bne.n	800192a <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2207      	movs	r2, #7
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b06      	cmp	r3, #6
 8001916:	d010      	beq.n	800193a <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2101      	movs	r1, #1
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001928:	e007      	b.n	800193a <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b004      	add	sp, #16
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40014000 	.word	0x40014000
 800194c:	40014400 	.word	0x40014400
 8001950:	40014800 	.word	0x40014800
 8001954:	40000400 	.word	0x40000400

08001958 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	2317      	movs	r3, #23
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	223c      	movs	r2, #60	@ 0x3c
 8001970:	5c9b      	ldrb	r3, [r3, r2]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001976:	2302      	movs	r3, #2
 8001978:	e0ad      	b.n	8001ad6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	223c      	movs	r2, #60	@ 0x3c
 800197e:	2101      	movs	r1, #1
 8001980:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d100      	bne.n	800198a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001988:	e076      	b.n	8001a78 <HAL_TIM_PWM_ConfigChannel+0x120>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0c      	cmp	r3, #12
 800198e:	d900      	bls.n	8001992 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001990:	e095      	b.n	8001abe <HAL_TIM_PWM_ConfigChannel+0x166>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d04e      	beq.n	8001a36 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b08      	cmp	r3, #8
 800199c:	d900      	bls.n	80019a0 <HAL_TIM_PWM_ConfigChannel+0x48>
 800199e:	e08e      	b.n	8001abe <HAL_TIM_PWM_ConfigChannel+0x166>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_PWM_ConfigChannel+0x56>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d021      	beq.n	80019f0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80019ac:	e087      	b.n	8001abe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	0011      	movs	r1, r2
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f9ec 	bl	8001d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2108      	movs	r1, #8
 80019c8:	430a      	orrs	r2, r1
 80019ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2104      	movs	r1, #4
 80019d8:	438a      	bics	r2, r1
 80019da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6999      	ldr	r1, [r3, #24]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	619a      	str	r2, [r3, #24]
      break;
 80019ee:	e06b      	b.n	8001ac8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 fa53 	bl	8001ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0109      	lsls	r1, r1, #4
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4931      	ldr	r1, [pc, #196]	@ (8001ae0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6999      	ldr	r1, [r3, #24]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	021a      	lsls	r2, r3, #8
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	619a      	str	r2, [r3, #24]
      break;
 8001a34:	e048      	b.n	8001ac8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 fab4 	bl	8001fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2108      	movs	r1, #8
 8001a50:	430a      	orrs	r2, r1
 8001a52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2104      	movs	r1, #4
 8001a60:	438a      	bics	r2, r1
 8001a62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69d9      	ldr	r1, [r3, #28]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	61da      	str	r2, [r3, #28]
      break;
 8001a76:	e027      	b.n	8001ac8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fb19 	bl	80020b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2180      	movs	r1, #128	@ 0x80
 8001a92:	0109      	lsls	r1, r1, #4
 8001a94:	430a      	orrs	r2, r1
 8001a96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69da      	ldr	r2, [r3, #28]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	490f      	ldr	r1, [pc, #60]	@ (8001ae0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69d9      	ldr	r1, [r3, #28]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	021a      	lsls	r2, r3, #8
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	61da      	str	r2, [r3, #28]
      break;
 8001abc:	e004      	b.n	8001ac8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001abe:	2317      	movs	r3, #23
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
      break;
 8001ac6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	223c      	movs	r2, #60	@ 0x3c
 8001acc:	2100      	movs	r1, #0
 8001ace:	5499      	strb	r1, [r3, r2]

  return status;
 8001ad0:	2317      	movs	r3, #23
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	781b      	ldrb	r3, [r3, #0]
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b006      	add	sp, #24
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	fffffbff 	.word	0xfffffbff

08001ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aee:	230f      	movs	r3, #15
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	223c      	movs	r2, #60	@ 0x3c
 8001afa:	5c9b      	ldrb	r3, [r3, r2]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_TIM_ConfigClockSource+0x20>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0bc      	b.n	8001c7e <HAL_TIM_ConfigClockSource+0x19a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	223c      	movs	r2, #60	@ 0x3c
 8001b08:	2101      	movs	r1, #1
 8001b0a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	223d      	movs	r2, #61	@ 0x3d
 8001b10:	2102      	movs	r1, #2
 8001b12:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2277      	movs	r2, #119	@ 0x77
 8001b20:	4393      	bics	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4a58      	ldr	r2, [pc, #352]	@ (8001c88 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2280      	movs	r2, #128	@ 0x80
 8001b3a:	0192      	lsls	r2, r2, #6
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d040      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0xde>
 8001b40:	2280      	movs	r2, #128	@ 0x80
 8001b42:	0192      	lsls	r2, r2, #6
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d900      	bls.n	8001b4a <HAL_TIM_ConfigClockSource+0x66>
 8001b48:	e088      	b.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	0152      	lsls	r2, r2, #5
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d100      	bne.n	8001b54 <HAL_TIM_ConfigClockSource+0x70>
 8001b52:	e088      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x182>
 8001b54:	2280      	movs	r2, #128	@ 0x80
 8001b56:	0152      	lsls	r2, r2, #5
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d900      	bls.n	8001b5e <HAL_TIM_ConfigClockSource+0x7a>
 8001b5c:	e07e      	b.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
 8001b5e:	2b70      	cmp	r3, #112	@ 0x70
 8001b60:	d018      	beq.n	8001b94 <HAL_TIM_ConfigClockSource+0xb0>
 8001b62:	d900      	bls.n	8001b66 <HAL_TIM_ConfigClockSource+0x82>
 8001b64:	e07a      	b.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
 8001b66:	2b60      	cmp	r3, #96	@ 0x60
 8001b68:	d04f      	beq.n	8001c0a <HAL_TIM_ConfigClockSource+0x126>
 8001b6a:	d900      	bls.n	8001b6e <HAL_TIM_ConfigClockSource+0x8a>
 8001b6c:	e076      	b.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
 8001b6e:	2b50      	cmp	r3, #80	@ 0x50
 8001b70:	d03b      	beq.n	8001bea <HAL_TIM_ConfigClockSource+0x106>
 8001b72:	d900      	bls.n	8001b76 <HAL_TIM_ConfigClockSource+0x92>
 8001b74:	e072      	b.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
 8001b76:	2b40      	cmp	r3, #64	@ 0x40
 8001b78:	d057      	beq.n	8001c2a <HAL_TIM_ConfigClockSource+0x146>
 8001b7a:	d900      	bls.n	8001b7e <HAL_TIM_ConfigClockSource+0x9a>
 8001b7c:	e06e      	b.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
 8001b7e:	2b30      	cmp	r3, #48	@ 0x30
 8001b80:	d063      	beq.n	8001c4a <HAL_TIM_ConfigClockSource+0x166>
 8001b82:	d86b      	bhi.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	d060      	beq.n	8001c4a <HAL_TIM_ConfigClockSource+0x166>
 8001b88:	d868      	bhi.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d05d      	beq.n	8001c4a <HAL_TIM_ConfigClockSource+0x166>
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d05b      	beq.n	8001c4a <HAL_TIM_ConfigClockSource+0x166>
 8001b92:	e063      	b.n	8001c5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ba4:	f000 fb6c 	bl	8002280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2277      	movs	r2, #119	@ 0x77
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	609a      	str	r2, [r3, #8]
      break;
 8001bc0:	e052      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bd2:	f000 fb55 	bl	8002280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2180      	movs	r1, #128	@ 0x80
 8001be2:	01c9      	lsls	r1, r1, #7
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
      break;
 8001be8:	e03e      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	f000 fac8 	bl	800218c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2150      	movs	r1, #80	@ 0x50
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 fb22 	bl	800224c <TIM_ITRx_SetConfig>
      break;
 8001c08:	e02e      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c16:	001a      	movs	r2, r3
 8001c18:	f000 fae6 	bl	80021e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2160      	movs	r1, #96	@ 0x60
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 fb12 	bl	800224c <TIM_ITRx_SetConfig>
      break;
 8001c28:	e01e      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c36:	001a      	movs	r2, r3
 8001c38:	f000 faa8 	bl	800218c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2140      	movs	r1, #64	@ 0x40
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fb02 	bl	800224c <TIM_ITRx_SetConfig>
      break;
 8001c48:	e00e      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0019      	movs	r1, r3
 8001c54:	0010      	movs	r0, r2
 8001c56:	f000 faf9 	bl	800224c <TIM_ITRx_SetConfig>
      break;
 8001c5a:	e005      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
      break;
 8001c64:	e000      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001c66:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	223d      	movs	r2, #61	@ 0x3d
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	223c      	movs	r2, #60	@ 0x3c
 8001c74:	2100      	movs	r1, #0
 8001c76:	5499      	strb	r1, [r3, r2]

  return status;
 8001c78:	230f      	movs	r3, #15
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	781b      	ldrb	r3, [r3, #0]
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b004      	add	sp, #16
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	ffff00ff 	.word	0xffff00ff

08001c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a36      	ldr	r2, [pc, #216]	@ (8001d78 <TIM_Base_SetConfig+0xec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d003      	beq.n	8001cac <TIM_Base_SetConfig+0x20>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a35      	ldr	r2, [pc, #212]	@ (8001d7c <TIM_Base_SetConfig+0xf0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d108      	bne.n	8001cbe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2270      	movs	r2, #112	@ 0x70
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d78 <TIM_Base_SetConfig+0xec>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <TIM_Base_SetConfig+0x62>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d7c <TIM_Base_SetConfig+0xf0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00f      	beq.n	8001cee <TIM_Base_SetConfig+0x62>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d80 <TIM_Base_SetConfig+0xf4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00b      	beq.n	8001cee <TIM_Base_SetConfig+0x62>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d84 <TIM_Base_SetConfig+0xf8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <TIM_Base_SetConfig+0x62>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a29      	ldr	r2, [pc, #164]	@ (8001d88 <TIM_Base_SetConfig+0xfc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d003      	beq.n	8001cee <TIM_Base_SetConfig+0x62>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a28      	ldr	r2, [pc, #160]	@ (8001d8c <TIM_Base_SetConfig+0x100>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d108      	bne.n	8001d00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a27      	ldr	r2, [pc, #156]	@ (8001d90 <TIM_Base_SetConfig+0x104>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2280      	movs	r2, #128	@ 0x80
 8001d04:	4393      	bics	r3, r2
 8001d06:	001a      	movs	r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a13      	ldr	r2, [pc, #76]	@ (8001d78 <TIM_Base_SetConfig+0xec>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00b      	beq.n	8001d46 <TIM_Base_SetConfig+0xba>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <TIM_Base_SetConfig+0xf8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <TIM_Base_SetConfig+0xba>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a13      	ldr	r2, [pc, #76]	@ (8001d88 <TIM_Base_SetConfig+0xfc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d003      	beq.n	8001d46 <TIM_Base_SetConfig+0xba>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <TIM_Base_SetConfig+0x100>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d103      	bne.n	8001d4e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2201      	movs	r2, #1
 8001d66:	4393      	bics	r3, r2
 8001d68:	001a      	movs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
  }
}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40002000 	.word	0x40002000
 8001d84:	40014000 	.word	0x40014000
 8001d88:	40014400 	.word	0x40014400
 8001d8c:	40014800 	.word	0x40014800
 8001d90:	fffffcff 	.word	0xfffffcff

08001d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4393      	bics	r3, r2
 8001dac:	001a      	movs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2270      	movs	r2, #112	@ 0x70
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4393      	bics	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4393      	bics	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a27      	ldr	r2, [pc, #156]	@ (8001e8c <TIM_OC1_SetConfig+0xf8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00b      	beq.n	8001e0a <TIM_OC1_SetConfig+0x76>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a26      	ldr	r2, [pc, #152]	@ (8001e90 <TIM_OC1_SetConfig+0xfc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <TIM_OC1_SetConfig+0x76>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a25      	ldr	r2, [pc, #148]	@ (8001e94 <TIM_OC1_SetConfig+0x100>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d003      	beq.n	8001e0a <TIM_OC1_SetConfig+0x76>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a24      	ldr	r2, [pc, #144]	@ (8001e98 <TIM_OC1_SetConfig+0x104>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10c      	bne.n	8001e24 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	4393      	bics	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2204      	movs	r2, #4
 8001e20:	4393      	bics	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a19      	ldr	r2, [pc, #100]	@ (8001e8c <TIM_OC1_SetConfig+0xf8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00b      	beq.n	8001e44 <TIM_OC1_SetConfig+0xb0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <TIM_OC1_SetConfig+0xfc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <TIM_OC1_SetConfig+0xb0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a17      	ldr	r2, [pc, #92]	@ (8001e94 <TIM_OC1_SetConfig+0x100>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d003      	beq.n	8001e44 <TIM_OC1_SetConfig+0xb0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a16      	ldr	r2, [pc, #88]	@ (8001e98 <TIM_OC1_SetConfig+0x104>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d111      	bne.n	8001e68 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4a15      	ldr	r2, [pc, #84]	@ (8001e9c <TIM_OC1_SetConfig+0x108>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <TIM_OC1_SetConfig+0x10c>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	621a      	str	r2, [r3, #32]
}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b006      	add	sp, #24
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40014000 	.word	0x40014000
 8001e94:	40014400 	.word	0x40014400
 8001e98:	40014800 	.word	0x40014800
 8001e9c:	fffffeff 	.word	0xfffffeff
 8001ea0:	fffffdff 	.word	0xfffffdff

08001ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	2210      	movs	r2, #16
 8001eba:	4393      	bics	r3, r2
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f8c <TIM_OC2_SetConfig+0xe8>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8001f90 <TIM_OC2_SetConfig+0xec>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2220      	movs	r2, #32
 8001eee:	4393      	bics	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <TIM_OC2_SetConfig+0xf0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10d      	bne.n	8001f22 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2240      	movs	r2, #64	@ 0x40
 8001f1e:	4393      	bics	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <TIM_OC2_SetConfig+0xf0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <TIM_OC2_SetConfig+0x9e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f98 <TIM_OC2_SetConfig+0xf4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <TIM_OC2_SetConfig+0x9e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <TIM_OC2_SetConfig+0xf8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d003      	beq.n	8001f42 <TIM_OC2_SetConfig+0x9e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <TIM_OC2_SetConfig+0xfc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d113      	bne.n	8001f6a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <TIM_OC2_SetConfig+0x100>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <TIM_OC2_SetConfig+0x104>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	621a      	str	r2, [r3, #32]
}
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b006      	add	sp, #24
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	ffff8fff 	.word	0xffff8fff
 8001f90:	fffffcff 	.word	0xfffffcff
 8001f94:	40012c00 	.word	0x40012c00
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	40014400 	.word	0x40014400
 8001fa0:	40014800 	.word	0x40014800
 8001fa4:	fffffbff 	.word	0xfffffbff
 8001fa8:	fffff7ff 	.word	0xfffff7ff

08001fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a33      	ldr	r2, [pc, #204]	@ (8002090 <TIM_OC3_SetConfig+0xe4>)
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2270      	movs	r2, #112	@ 0x70
 8001fd8:	4393      	bics	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <TIM_OC3_SetConfig+0xe8>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a24      	ldr	r2, [pc, #144]	@ (8002098 <TIM_OC3_SetConfig+0xec>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10d      	bne.n	8002026 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4a23      	ldr	r2, [pc, #140]	@ (800209c <TIM_OC3_SetConfig+0xf0>)
 800200e:	4013      	ands	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4a1f      	ldr	r2, [pc, #124]	@ (80020a0 <TIM_OC3_SetConfig+0xf4>)
 8002022:	4013      	ands	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <TIM_OC3_SetConfig+0xec>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00b      	beq.n	8002046 <TIM_OC3_SetConfig+0x9a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <TIM_OC3_SetConfig+0xf8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <TIM_OC3_SetConfig+0x9a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <TIM_OC3_SetConfig+0xfc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d003      	beq.n	8002046 <TIM_OC3_SetConfig+0x9a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1a      	ldr	r2, [pc, #104]	@ (80020ac <TIM_OC3_SetConfig+0x100>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d113      	bne.n	800206e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <TIM_OC3_SetConfig+0x104>)
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <TIM_OC3_SetConfig+0x108>)
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	621a      	str	r2, [r3, #32]
}
 8002088:	46c0      	nop			@ (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b006      	add	sp, #24
 800208e:	bd80      	pop	{r7, pc}
 8002090:	fffffeff 	.word	0xfffffeff
 8002094:	fffffdff 	.word	0xfffffdff
 8002098:	40012c00 	.word	0x40012c00
 800209c:	fffff7ff 	.word	0xfffff7ff
 80020a0:	fffffbff 	.word	0xfffffbff
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800
 80020b0:	ffffefff 	.word	0xffffefff
 80020b4:	ffffdfff 	.word	0xffffdfff

080020b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a26      	ldr	r2, [pc, #152]	@ (8002168 <TIM_OC4_SetConfig+0xb0>)
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a22      	ldr	r2, [pc, #136]	@ (800216c <TIM_OC4_SetConfig+0xb4>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <TIM_OC4_SetConfig+0xb8>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002174 <TIM_OC4_SetConfig+0xbc>)
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	031b      	lsls	r3, r3, #12
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <TIM_OC4_SetConfig+0xc0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00b      	beq.n	8002130 <TIM_OC4_SetConfig+0x78>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a18      	ldr	r2, [pc, #96]	@ (800217c <TIM_OC4_SetConfig+0xc4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <TIM_OC4_SetConfig+0x78>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a17      	ldr	r2, [pc, #92]	@ (8002180 <TIM_OC4_SetConfig+0xc8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <TIM_OC4_SetConfig+0x78>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a16      	ldr	r2, [pc, #88]	@ (8002184 <TIM_OC4_SetConfig+0xcc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d109      	bne.n	8002144 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	4a15      	ldr	r2, [pc, #84]	@ (8002188 <TIM_OC4_SetConfig+0xd0>)
 8002134:	4013      	ands	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	621a      	str	r2, [r3, #32]
}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b006      	add	sp, #24
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	ffffefff 	.word	0xffffefff
 800216c:	ffff8fff 	.word	0xffff8fff
 8002170:	fffffcff 	.word	0xfffffcff
 8002174:	ffffdfff 	.word	0xffffdfff
 8002178:	40012c00 	.word	0x40012c00
 800217c:	40014000 	.word	0x40014000
 8002180:	40014400 	.word	0x40014400
 8002184:	40014800 	.word	0x40014800
 8002188:	ffffbfff 	.word	0xffffbfff

0800218c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4393      	bics	r3, r2
 80021a6:	001a      	movs	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	22f0      	movs	r2, #240	@ 0xf0
 80021b6:	4393      	bics	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	220a      	movs	r2, #10
 80021c8:	4393      	bics	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	621a      	str	r2, [r3, #32]
}
 80021e0:	46c0      	nop			@ (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b006      	add	sp, #24
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	2210      	movs	r2, #16
 8002200:	4393      	bics	r3, r2
 8002202:	001a      	movs	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <TIM_TI2_ConfigInputStage+0x60>)
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	22a0      	movs	r2, #160	@ 0xa0
 8002224:	4393      	bics	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	621a      	str	r2, [r3, #32]
}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b006      	add	sp, #24
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	ffff0fff 	.word	0xffff0fff

0800224c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2270      	movs	r2, #112	@ 0x70
 8002260:	4393      	bics	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	2207      	movs	r2, #7
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	609a      	str	r2, [r3, #8]
}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b004      	add	sp, #16
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	4a09      	ldr	r2, [pc, #36]	@ (80022bc <TIM_ETR_SetConfig+0x3c>)
 8002298:	4013      	ands	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	021a      	lsls	r2, r3, #8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	46c0      	nop			@ (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b006      	add	sp, #24
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	ffff00ff 	.word	0xffff00ff

080022c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	221f      	movs	r2, #31
 80022d0:	4013      	ands	r3, r2
 80022d2:	2201      	movs	r2, #1
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	43d2      	mvns	r2, r2
 80022e2:	401a      	ands	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	211f      	movs	r1, #31
 80022f0:	400b      	ands	r3, r1
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4099      	lsls	r1, r3
 80022f6:	000b      	movs	r3, r1
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	621a      	str	r2, [r3, #32]
}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b006      	add	sp, #24
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	223c      	movs	r2, #60	@ 0x3c
 8002316:	5c9b      	ldrb	r3, [r3, r2]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800231c:	2302      	movs	r3, #2
 800231e:	e041      	b.n	80023a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	223c      	movs	r2, #60	@ 0x3c
 8002324:	2101      	movs	r1, #1
 8002326:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	223d      	movs	r2, #61	@ 0x3d
 800232c:	2102      	movs	r1, #2
 800232e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2270      	movs	r2, #112	@ 0x70
 8002344:	4393      	bics	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a13      	ldr	r2, [pc, #76]	@ (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d10c      	bne.n	8002392 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2280      	movs	r2, #128	@ 0x80
 800237c:	4393      	bics	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	4313      	orrs	r3, r2
 8002388:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	223d      	movs	r2, #61	@ 0x3d
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	223c      	movs	r2, #60	@ 0x3c
 800239e:	2100      	movs	r1, #0
 80023a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b004      	add	sp, #16
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40014000 	.word	0x40014000

080023b8 <memset>:
 80023b8:	0003      	movs	r3, r0
 80023ba:	1882      	adds	r2, r0, r2
 80023bc:	4293      	cmp	r3, r2
 80023be:	d100      	bne.n	80023c2 <memset+0xa>
 80023c0:	4770      	bx	lr
 80023c2:	7019      	strb	r1, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	e7f9      	b.n	80023bc <memset+0x4>

080023c8 <__libc_init_array>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	2600      	movs	r6, #0
 80023cc:	4c0c      	ldr	r4, [pc, #48]	@ (8002400 <__libc_init_array+0x38>)
 80023ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002404 <__libc_init_array+0x3c>)
 80023d0:	1b64      	subs	r4, r4, r5
 80023d2:	10a4      	asrs	r4, r4, #2
 80023d4:	42a6      	cmp	r6, r4
 80023d6:	d109      	bne.n	80023ec <__libc_init_array+0x24>
 80023d8:	2600      	movs	r6, #0
 80023da:	f000 f819 	bl	8002410 <_init>
 80023de:	4c0a      	ldr	r4, [pc, #40]	@ (8002408 <__libc_init_array+0x40>)
 80023e0:	4d0a      	ldr	r5, [pc, #40]	@ (800240c <__libc_init_array+0x44>)
 80023e2:	1b64      	subs	r4, r4, r5
 80023e4:	10a4      	asrs	r4, r4, #2
 80023e6:	42a6      	cmp	r6, r4
 80023e8:	d105      	bne.n	80023f6 <__libc_init_array+0x2e>
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
 80023ec:	00b3      	lsls	r3, r6, #2
 80023ee:	58eb      	ldr	r3, [r5, r3]
 80023f0:	4798      	blx	r3
 80023f2:	3601      	adds	r6, #1
 80023f4:	e7ee      	b.n	80023d4 <__libc_init_array+0xc>
 80023f6:	00b3      	lsls	r3, r6, #2
 80023f8:	58eb      	ldr	r3, [r5, r3]
 80023fa:	4798      	blx	r3
 80023fc:	3601      	adds	r6, #1
 80023fe:	e7f2      	b.n	80023e6 <__libc_init_array+0x1e>
 8002400:	08002458 	.word	0x08002458
 8002404:	08002458 	.word	0x08002458
 8002408:	0800245c 	.word	0x0800245c
 800240c:	08002458 	.word	0x08002458

08002410 <_init>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002416:	bc08      	pop	{r3}
 8002418:	469e      	mov	lr, r3
 800241a:	4770      	bx	lr

0800241c <_fini>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002422:	bc08      	pop	{r3}
 8002424:	469e      	mov	lr, r3
 8002426:	4770      	bx	lr
